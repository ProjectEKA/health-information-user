openapi: 3.0.0
info:
  version: 0.0.1
  title: Health Information User
  description: >
    "Health information User" refers to an entity that wishes to consume the
    services of the Health Data Consent Manager and obtain aggregated health
    information for providing services to the patient .

servers:
  - url: https://ncg-dev.projecteka.in/hiu-api
    description: Dev

tags:
  - name: frontend
  - name: consent notification
  - name: data notification

paths:
  /consent-requests:
    post:
      tags:
        - frontend
      summary: Create consent request
      description: Creates a consent request to get data about a patient by HIU user.
      operationId: createConsentRequest
      parameters:
        - $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentRequest'
      responses:
        '200':
          description: Request created in the consent manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
  /sessions:
    post:
      tags:
        - frontend
      summary: Login user
      description: Create a session for user / doctors.
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: Request created in the consent manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: bearer yJhbGciOiJSUzI1Ni.IsInR5cCIgOiAiSldUIiwia2lkIiA6ICJrVVp.2MXJQMjRyYXN1UW9wU2lWbkdZQUZIVFowYVZGVWpYNXFLMnNibTk0In0
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    post:
      tags:
        - frontend
      summary: Create user
      description: Create HIU user who can access HIU application
      parameters:
        - $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
      responses:
        '200':
          description: Successful creation of consent artefact.
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Does not have enough permission to create user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /patients/{patient-id}:
    get:
      tags:
        - frontend
      summary: Search patient
      description: Search patients in the respective health information consent manager.
      parameters:
        - $ref: '#/components/parameters/authorization'
        - name: patient-id
          in: path
          required: true
          schema:
            type: string
            format: <user-id>@<ncg-id>
            example: batman@ncg
      responses:
        '200':
          description: Successful creation of consent artefact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientSearchRepresentation'
  /users/password:
    put:
      tags:
        - frontend
      summary: Change password
      description: Change the password for logged in user
      parameters:
        - $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
      responses:
        '200':
          description: Successful updation of password.
        '400':
          description: When new password is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /consent/notification/:
    post:
      tags:
        - consent notification
      summary: Consent notification
      description: Call back url from consent manager when consent artefact gets created.
      parameters:
        - $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentNotification'
      responses:
        '200':
          description: Notification successful.
        '401':
          description: >
            **Causes:**
              * Invalid/Expired/Empty token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >
            **Causes:**
              * Downstream services are down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health-information/fetch/{consent-request-id}/:
    get:
      tags:
        - frontend
      summary: Get health information.
      description: This API can be used to fetch the health information for a consent request once the request is granted by the patient.
      parameters:
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: consent-request-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthInformation'
  /data/notification:
    post:
      tags:
        - data notification
      summary: data notification
      description: Once data is prepared at HIP, will be passed to HIU.
      parameters:
        - $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataNotification'
          application/xml:
            schema:
              $ref: '#/components/schemas/DataNotification'
      responses:
        '202':
          description: Data accepted.
        '401':
          description: >
            **Causes:**
              * Invalid/Expired/Empty token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >
            **Causes:**
              * Downstream services are down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  parameters:
    authorization:
      name: Authorization
      in: header
      required: true
      description: Bearer token which was issued after successful login.
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100) (recommended to sent always)
      required: false
      schema:
        type: integer
        format: int32
    offset:
      name: offset
      in: query
      description: How many items out of line.
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    PatientSearchRepresentation:
      type: object
      properties:
        patient:
          $ref: '#/components/schemas/PatientRepresentation'
    ChangePasswordBody:
      type: object
      properties:
        oldPassword:
          type: string
          example: someOldpassword@1
        newPassword:
          type: string
          example: someNewpassword@1
    ConsentManagerPatientID:
      type: object
      properties:
        id:
          type: string
          format: <user-id>@<ncg-id>
          example: batman@ncg
    PatientRepresentation:
      allOf:
        - $ref: '#/components/schemas/ConsentManagerPatientID'
        - type: object
          properties:
            display:
              type: string
    HITypeEnum:
      type: string
      enum:
        - HIType1
        - HIType2
        - HIType3
        - HIType4
        - HIType5
      example: "DiagnosticReport"
    ConsentRequest:
      type: object
      properties:
        consent:
          type: object
          properties:
            patient:
              allOf:
                - $ref: '#/components/schemas/ConsentManagerPatientID'
            purpose:
              type: object
              properties:
                code:
                  type: string
                  example: "ReferralService"
            hitypes:
              type: array
              items:
                $ref: '#/components/schemas/HITypeEnum'
            permission:
              type: object
              properties:
                dateRange:
                  type: object
                  properties:
                    from:
                      type: string
                      format: datetime
                    to:
                      type: string
                      format: datetime
                dataEraseAt:
                  type: string
                  format: date-time
    ConsentStatus:
      type: string
      example: 'REQUESTED | EXPIRED | DENIED | GRANTED | REVOKED'
      enum:
        - REQUESTED
        - EXPIRED
        - DENIED
        - GRANTED
        - REVOKED
    ConsentArtefactReference:
      type: object
      properties:
        id:
          type: string
          example: '<consent-artefact-id>'
    ConsentNotification:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ConsentStatus'
        timestamp:
          type: string
          format: date-time
          description: Denotes the time at which consent was granted/revoked
        consentRequestId:
          type: string
          example: '<consent-request-id>'
        consentArtefacts:
          type: array
          items:
            $ref: '#/components/schemas/ConsentArtefactReference'
    HealthInformation:
      type: object
      properties:
        limit:
          type: integer
        size:
          type: integer
        offset:
          type: integer
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
    Entry:
      type: object
      required:
        - hipId
        - hipName
        - status
        - data
      properties:
        hipId:
          type: string
        hipName:
          type: string
        status:
          type: string
          enum: [SUCCEEDED, ERRORED]
        data:
          type: object
          description: data is a FHIR bundle. https://www.hl7.org/fhir/bundle.html
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      xml:
        name: ErrorResponse
    Error:
      type: object
      properties:
        code:
          type: integer
          enum: [1000, 1001, 1007]
          description: >
            1. Error code 1000 : No patient found
            2. Error code 1001: Multiple patients found
        message:
          type: string
      xml:
        name: Error
    DataNotification:
      type: object
      required:
        - transactionId
        - entries
        - keyMaterial
        - pageNumber
        - pageCount
      properties:
        pageNumber:
          type: integer
          description: Current page number.
        pageCount:
          type: integer
          description: Total number of pages.
        transactionId:
          type: string
          format: uuid
          description: Transaction Id issued when data requested.
        entries:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EntryContent'
              - $ref: '#/components/schemas/EntryLink'
        keyMaterial:
          $ref: '#/components/schemas/KeyMaterial'
    EntryContent:
      type: object
      required:
        - content
        - media
      properties:
        content:
          type: string
          description: Encrypted content
          example: Encrypted content of data packaged in FHIR bundle
        media:
          type: string
          enum: ['application/fhir+json']
        checksum:
          type: string
        carecontextReference:
          type: string
          description: care context reference number.
    EntryLink:
      type: object
      required:
        - link
        - media
      properties:
        link:
          type: string
          description: Encrypted content
          example: https://data-from.net/sa2321afaf12e13
        media:
          type: string
          enum: ['application/fhir+json']
        checksum:
          type: string
        carecontextReference:
          type: string
          description: care context reference number.
    KeyMaterial:
      type: object
      required:
        - cryptoAlg
        - curve
        - dhPublicKey
        - nonce
      properties:
        cryptoAlg:
          type: string
          format: string
          example: ECDH
        curve:
          type: string
          format: string
          example: Curve25519
        dhPublicKey:
          $ref: '#/components/schemas/KeyObject'
        nonce:
          type: string
          format: 32 byte string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
    KeyObject:
      type: object
      required:
        - expiry
        - parameters
        - keyValue
      properties:
        expiry:
          type: string
          format: date-time
        parameters:
          type: string
          format: string
          example: Curve25519/32byte random key
        keyValue:
          type: string
          format: string
    SessionRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: dr.manju
        password:
          type: string
          example: SecretPassword
    UserCreationRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [DOCTOR, ADMIN]
          default: DOCTOR